for(team in teamnames){
z <- grep(paste("/teams/", team, "/", sep=""), z, value=TRUE)
wins <- as.numeric(gsub(".*data-stat=\\\"wins\\\" >([0-9]*)<.*", "\\1", z))
losses <- as.numeric(gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z))
x <- rbind(x, data.frame(date=date, team=team, wins=wins, losses=losses))
}
}
q <- getHistoricalStandings(date)
teamnames <- c("ATL", "BKN", "BOS", "CHA", "CHI", "CLE", "DAL", "DET", "DEN",
"GSW", "HOU", "IND", "LAC", "LAL", "MEM", "MIA", "MIL", "MIN",
"NOP", "NYK", "OKC", "ORL", "PHI", "PHX", "POR", "SAC", "SAS",
"TOR", "UTA", "WAS")
q <- getHistoricalStandings(date)
for(team in teamnames){
z <- grep(paste("/teams/", team, "/", sep=""), z, value=TRUE)
wins <- as.numeric(gsub(".*data-stat=\\\"wins\\\" >([0-9]*)<.*", "\\1", z))
losses <- as.numeric(gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z))
x <- rbind(x, data.frame(date=date, team=team, wins=wins, losses=losses))
}
for(team in teamnames){
cat(team)
z <- grep(paste("/teams/", team, "/", sep=""), z, value=TRUE)
wins <- as.numeric(gsub(".*data-stat=\\\"wins\\\" >([0-9]*)<.*", "\\1", z))
losses <- as.numeric(gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z))
x <- rbind(x, data.frame(date=date, team=team, wins=wins, losses=losses))
}
z <- grep(paste("/teams/", team, "/", sep=""), z, value=TRUE)
z
z <- grep("full_table", thepage, value=TRUE)
z
z <- grep(paste("/teams/", team, "/", sep=""), z, value=TRUE)
z
wins <- as.numeric(gsub(".*data-stat=\\\"wins\\\" >([0-9]*)<.*", "\\1", z))
losses <- as.numeric(gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z))
x <- rbind(x, data.frame(date=date, team=team, wins=wins, losses=losses))
x
URL <- paste("http://www.basketball-reference.com/friv/standings.cgi?month=", month,"&day=", day, "&year=", year, "&lg_id=NBA", sep="")
thepage = readLines(URL)
x <- data.frame(date=character(), team=character(), wins=integer(), losses=integer())
z <- grep("full_table", thepage, value=TRUE)
for(team in teamnames){
cat(team)
z <- grep(paste("/teams/", team, "/", sep=""), z, value=TRUE)
wins <- as.numeric(gsub(".*data-stat=\\\"wins\\\" >([0-9]*)<.*", "\\1", z))
losses <- as.numeric(gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z))
x <- rbind(x, data.frame(date=date, team=team, wins=wins, losses=losses))
}
getHistoricalStandings <- function(date){
day <- format(date, "%d")
month <- format(date, "%m")
year <- format(date, "%Y")
URL <- paste("http://www.basketball-reference.com/friv/standings.cgi?month=", month,"&day=", day, "&year=", year, "&lg_id=NBA", sep="")
thepage = readLines(URL)
x <- data.frame(date=character(), team=character(), wins=integer(), losses=integer())
thepage <- grep("full_table", thepage, value=TRUE)
for(team in teamnames){
cat(team)
z <- grep(paste("/teams/", team, "/", sep=""), thepage, value=TRUE)
wins <- as.numeric(gsub(".*data-stat=\\\"wins\\\" >([0-9]*)<.*", "\\1", z))
losses <- as.numeric(gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z))
x <- rbind(x, data.frame(date=date, team=team, wins=wins, losses=losses))
}
}
q <- getHistoricalStandings(date)
cat(team)
thepage = readLines(URL)
x <- data.frame(date=character(), team=character(), wins=integer(), losses=integer())
thepage <- grep("full_table", thepage, value=TRUE)
length(thepage)
cat(team)
z <- grep(paste("/teams/", team, "/", sep=""), thepage, value=TRUE)
z
thepage[14]
teamnames.BBR <- c("ATL", "BRK", "BOS", "CHA", "CHI", "CLE", "DAL", "DET", "DEN",
"GSW", "HOU", "IND", "LAC", "LAL", "MEM", "MIA", "MIL", "MIN",
"NOP", "NYK", "OKC", "ORL", "PHI", "PHX", "POR", "SAC", "SAS",
"TOR", "UTA", "WAS")
teamnames.BBR <- c("ATL", "BRK", "BOS", "CHA", "CHI", "CLE", "DAL", "DET", "DEN",
"GSW", "HOU", "IND", "LAC", "LAL", "MEM", "MIA", "MIL", "MIN",
"NOP", "NYK", "OKC", "ORL", "PHI", "PHX", "POR", "SAC", "SAS",
"TOR", "UTA", "WAS")
# Given a date in history, this uses basketball reference to return a dataframe
# containing the current standings of all teams in the league
getHistoricalStandings <- function(date){
day <- format(date, "%d")
month <- format(date, "%m")
year <- format(date, "%Y")
URL <- paste("http://www.basketball-reference.com/friv/standings.cgi?month=", month,"&day=", day, "&year=", year, "&lg_id=NBA", sep="")
thepage = readLines(URL)
x <- data.frame(date=character(), team=character(), wins=integer(), losses=integer())
thepage <- grep("full_table", thepage, value=TRUE)
for(team in teamnames.BRR){
cat(team)
z <- grep(paste("/teams/", team, "/", sep=""), thepage, value=TRUE)
wins <- as.numeric(gsub(".*data-stat=\\\"wins\\\" >([0-9]*)<.*", "\\1", z))
losses <- as.numeric(gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z))
x <- rbind(x, data.frame(date=date, team=team, wins=wins, losses=losses))
}
}
q <- getHistoricalStandings(date)
# Given a date in history, this uses basketball reference to return a dataframe
# containing the current standings of all teams in the league
getHistoricalStandings <- function(date){
day <- format(date, "%d")
month <- format(date, "%m")
year <- format(date, "%Y")
URL <- paste("http://www.basketball-reference.com/friv/standings.cgi?month=", month,"&day=", day, "&year=", year, "&lg_id=NBA", sep="")
thepage = readLines(URL)
x <- data.frame(date=character(), team=character(), wins=integer(), losses=integer())
thepage <- grep("full_table", thepage, value=TRUE)
for(team in teamnames.BBR){
cat(team)
z <- grep(paste("/teams/", team, "/", sep=""), thepage, value=TRUE)
wins <- as.numeric(gsub(".*data-stat=\\\"wins\\\" >([0-9]*)<.*", "\\1", z))
losses <- as.numeric(gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z))
x <- rbind(x, data.frame(date=date, team=team, wins=wins, losses=losses))
}
}
q <- getHistoricalStandings(date)
thepage[4]
thepage[3]
teamnames.BBR <- c("ATL", "BRK", "BOS", "CHO", "CHI", "CLE", "DAL", "DET", "DEN",
"GSW", "HOU", "IND", "LAC", "LAL", "MEM", "MIA", "MIL", "MIN",
"NOP", "NYK", "OKC", "ORL", "PHI", "PHX", "POR", "SAC", "SAS",
"TOR", "UTA", "WAS")
getHistoricalStandings <- function(date){
day <- format(date, "%d")
month <- format(date, "%m")
year <- format(date, "%Y")
URL <- paste("http://www.basketball-reference.com/friv/standings.cgi?month=", month,"&day=", day, "&year=", year, "&lg_id=NBA", sep="")
thepage = readLines(URL)
x <- data.frame(date=character(), team=character(), wins=integer(), losses=integer())
thepage <- grep("full_table", thepage, value=TRUE)
for(team in teamnames.BBR){
cat(team)
z <- grep(paste("/teams/", team, "/", sep=""), thepage, value=TRUE)
wins <- as.numeric(gsub(".*data-stat=\\\"wins\\\" >([0-9]*)<.*", "\\1", z))
losses <- as.numeric(gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z))
x <- rbind(x, data.frame(date=date, team=team, wins=wins, losses=losses))
}
}
q <- getHistoricalStandings(date)
teamnames.BBR <- c("ATL", "BRK", "BOS", "CHO", "CHI", "CLE", "DAL", "DET", "DEN",
"GSW", "HOU", "IND", "LAC", "LAL", "MEM", "MIA", "MIL", "MIN",
"NOP", "NYK", "OKC", "ORL", "PHI", "PHO", "POR", "SAC", "SAS",
"TOR", "UTA", "WAS")
# Given a date in history, this uses basketball reference to return a dataframe
# containing the current standings of all teams in the league
getHistoricalStandings <- function(date){
day <- format(date, "%d")
month <- format(date, "%m")
year <- format(date, "%Y")
URL <- paste("http://www.basketball-reference.com/friv/standings.cgi?month=", month,"&day=", day, "&year=", year, "&lg_id=NBA", sep="")
thepage = readLines(URL)
x <- data.frame(date=character(), team=character(), wins=integer(), losses=integer())
thepage <- grep("full_table", thepage, value=TRUE)
for(team in teamnames.BBR){
cat(team)
z <- grep(paste("/teams/", team, "/", sep=""), thepage, value=TRUE)
wins <- as.numeric(gsub(".*data-stat=\\\"wins\\\" >([0-9]*)<.*", "\\1", z))
losses <- as.numeric(gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z))
x <- rbind(x, data.frame(date=date, team=team, wins=wins, losses=losses))
}
}
q <- getHistoricalStandings(date)
View(q)
q
getHistoricalStandings(date)
getHistoricalStandings <- function(date){
day <- format(date, "%d")
month <- format(date, "%m")
year <- format(date, "%Y")
URL <- paste("http://www.basketball-reference.com/friv/standings.cgi?month=", month,"&day=", day, "&year=", year, "&lg_id=NBA", sep="")
thepage = readLines(URL)
x <- data.frame(date=character(), team=character(), wins=integer(), losses=integer())
thepage <- grep("full_table", thepage, value=TRUE)
for(team in teamnames.BBR){
z <- grep(paste("/teams/", team, "/", sep=""), thepage, value=TRUE)
wins <- as.numeric(gsub(".*data-stat=\\\"wins\\\" >([0-9]*)<.*", "\\1", z))
losses <- as.numeric(gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z))
x <- rbind(x, data.frame(date=date, team=team, wins=wins, losses=losses))
}
x
}
q<-getHistoricalStandings(date)
View()
View(q)
source('~/Documents/Programming/NBABoxScores/PowerRankingsScraper.R', echo=TRUE)
View(rd)
URL <- "https://www.reddit.com/r/nba/comments/596vdf/official_rnba_power_rankings_0_102416/"
date <- "10.24.2016"
qrd <- rbind(rd, scrapePowerRankings1617(URL, date))
qrd
standings <- getHistoricalStandings(date)
date
date <- as.POSIXct(date, format="%m.%d.%Y")
date
standings <- getHistoricalStandings(rankingdate)
rankingdate <- as.POSIXct(date, format="%m.%d.%Y")
standings <- getHistoricalStandings(rankingdate)
date
getHistoricalStandings <- function(date){
day <- format(date, "%d")
month <- format(date, "%m")
year <- format(date, "%Y")
URL <- paste("http://www.basketball-reference.com/friv/standings.cgi?month=", month,"&day=", day, "&year=", year, "&lg_id=NBA", sep="")
thepage = readLines(URL)
x <- data.frame(date=character(), team=character(), wins=integer(), losses=integer())
thepage <- grep("full_table", thepage, value=TRUE)
for(team in teamnames.BBR){
print(team)
z <- grep(paste("/teams/", team, "/", sep=""), thepage, value=TRUE)
wins <- as.numeric(gsub(".*data-stat=\\\"wins\\\" >([0-9]*)<.*", "\\1", z))
losses <- as.numeric(gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z))
x <- rbind(x, data.frame(date=date, team=team, wins=wins, losses=losses))
}
x
}
thepage = readLines(URL)
rankingdate <- as.POSIXct(date, format="%m.%d.%Y")
standings <- getHistoricalStandings(rankingdate)
date
day <- format(date, "%d")
month <- format(date, "%m")
year <- format(date, "%Y")
URL <- paste("http://www.basketball-reference.com/friv/standings.cgi?month=", month,"&day=", day, "&year=", year, "&lg_id=NBA", sep="")
thepage = readLines(URL)
x <- data.frame(date=character(), team=character(), wins=integer(), losses=integer())
thepage <- grep("full_table", thepage, value=TRUE)
thepage
URL <- paste("http://www.basketball-reference.com/friv/standings.cgi?month=", month,"&day=", day, "&year=", year, "&lg_id=NBA", sep="")
thepage = readLines(URL)
thepage
x <- data.frame(date=character(), team=character(), wins=integer(), losses=integer())
thepage <- grep("full_table", thepage, value=TRUE)
thepage
URL
getHistoricalStandings <- function(date){
day <- format(date, "%d")
month <- format(date, "%m")
year <- format(date, "%Y")
URL <- paste("http://www.basketball-reference.com/friv/standings.cgi?month=", month,"&day=", day, "&year=", year, "&lg_id=NBA", sep="")
thepage = readLines(URL)
x <- data.frame(date=character(), team=character(), wins=integer(), losses=integer())
thepage <- grep("full_table", thepage, value=TRUE)
for(team in teamnames.BBR){
print(team)
z <- grep(paste("/teams/", team, "/", sep=""), thepage, value=TRUE)
wins <- as.numeric(gsub(".*data-stat=\\\"wins\\\" >([0-9]*)<.*", "\\1", z))
losses <- as.numeric(gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z))
x <- rbind(x, data.frame(date=date, team=team, wins=wins, losses=losses))
}
x
}
date
date <- "11.09.2015"
date <- "11.09.2015"
source <- "reddit"
x <- data.frame(rankingdate=character(), source=character(), team=character(), teamrank=integer(),
delta=character(), record.w=integer(), record.l=integer())
thepage = readLines(URL)
rankingdate <- as.POSIXct(date, format="%m.%d.%Y")
standings <- getHistoricalStandings(rankingdate)
# Given a date in history, this uses basketball reference to return a dataframe
# containing the current standings of all teams in the league
getHistoricalStandings <- function(date){
day <- format(date, "%d")
month <- format(date, "%m")
year <- format(date, "%Y")
URL <- paste("http://www.basketball-reference.com/friv/standings.cgi?month=", month,"&day=", day, "&year=", year, "&lg_id=NBA", sep="")
thepage = readLines(URL)
x <- data.frame(date=character(), team=character(), wins=integer(), losses=integer())
thepage <- grep("full_table", thepage, value=TRUE)
for(team in teamnames.BBR){
#print(team)
z <- grep(paste("/teams/", team, "/", sep=""), thepage, value=TRUE)
wins <- as.numeric(gsub(".*data-stat=\\\"wins\\\" >([0-9]*)<.*", "\\1", z))
losses <- as.numeric(gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z))
x <- rbind(x, data.frame(date=date, team=team, wins=wins, losses=losses))
}
x
}
standings
convertBBRToReddit(standings)
convertBBRToReddit <- function(x){
x <- gsub("BRK", "BKN", x)
x <- gsub("CHO", "CHA", x)
x <- gsub("PHO", "PHX", x)
x
}
convertBBRToReddit(standings)
standings
lapply(standings, function(x){gsub("BRK", "BKN", x)})
aa <- lapply(standings, function(x){gsub("BRK", "BKN", x)})
aa
View(aa)
convertRedditToBBR <- function(x){
x$team <- gsub("BKN", "BRK", x$team)
x$team <- gsub("CHA", "CHO", x$team)
x$team <- gsub("PHX", "PHO", x$team)
x
}
convertBBRToReddit <- function(x){
x$team <- gsub("BRK", "BKN", x$team)
x$team <- gsub("CHO", "CHA", x$team)
x$team <- gsub("PHO", "PHX", x$team)
x
}
convertBBRToReddit(standings)
standings <- convertBBRToReddit(getHistoricalStandings(rankingdate))
record.w <- standings$wins[standings$team==team,]
team
standings[standings$team==team,]
standings[standings$team==team,]$wins
record.w <- standings[standings$team==team,]$wins
source('~/Documents/Programming/NBABoxScores/PowerRankingsScraper.R', echo=TRUE)
source('~/Documents/Programming/NBABoxScores/PowerRankingsScraper.R', echo=TRUE)
wins
source('~/Documents/Programming/NBABoxScores/PowerRankingsScraper.R', echo=TRUE)
View(rd)
dim(rd)
date
rankingdate
date <- as.POSIXct("04112016", format="%m%d%Y")
date
getHistoricalStandings(date)
rbind(getHistoricalStandings(date), getHistoricalStandings(as.POSIXct("10022016", format="%m%d%Y")))
head(rd)
tail(rd)
source('~/Documents/Programming/NBABoxScores/PowerRankingsScraper.R', echo=TRUE)
View(rd)
write.table(rd, file="powerranking16.csv")
q <- read.table("powerranking16.csv")
View(q)
source('~/Documents/Programming/NBABoxScores/PowerRankingsScraper.R', echo=TRUE)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
View(results)
rd$pct <- rd$.w/rd$.l
rd$pct <- NA
rd$pct[!is.na(rd$record.w)] <- rd$record.w/(rd$record.w+record.l)
rd$pct[!is.na(rd$record.w)] <- rd$record.w/(rd$record.w+rd$record.l)
rd$pct <- NA
rd$pct[!is.na(rd$record.w)] <- rd[!is.na(rd$record.w)]$record.w/(rd$record.w+rd$record.l)
rd$pct[!is.na(rd$record.w)]
rd$pct <- NA
rd$pct[!is.na(rd$record.w)] <- rd[!is.na(rd$record.w)]$record.w/
(rd[!is.na(rd$record.w)]$record.w+rd[!is.na(rd$record.w)]$record.l)
rd[!is.na(rd$record.w)]$record.w
rd[!is.na(rd$record.w),]$record.w
rd$pct <- NA
rd$pct[!is.na(rd$record.w)] <- rd[!is.na(rd$record.w),]$record.w/
(rd[!is.na(rd$record.w),]$record.w+rd[!is.na(rd$record.w),]$record.l)
rd$pct
View(rd)
View(results)
unique(rd$rankingdate)
factor(rd$rankingdate)
levels(rd$rankingdate)
results$rankingdate[100]-results$rankingdate[1]
as.numeric(results$rankingdate[100])-as.numeric(results$rankingdate[1])
as.POSIXct(results$rankingdate)
as.POSIXct(results$rankingdate[1])
results$rankingdate[1]
results
as.POSIXct(rd$rankingdate[1])
as.numeric(rd$rankingdate[100])-as.numeric(rd$rankingdate[1])
rd$rankingdate[100]
rd$rankingdate[1]
class(rd$rankingdate)
class(rd$rankingdate[1])
as.POSIXct(rd$rankingdate)
results$date <- as.POSIXct(results$date)
rd$rankingdate <- as.POSIXct(rd$rankingdate)
rd <- read.table("powerrankings15-16.csv")
results <- read.table("15-16-season.csv")
View(rd)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
rec
game
length(results)
length(results[,])
length(results[,1])
results[i,]
i=3
results[i,]
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
rd[j,]$rankingdate < results[i,]$date
rd[j,]$rankingdate
rd[j,]
rd <- read.table("powerrankings15-16.csv")
results <- read.table("15-16-season.csv")
results$date <- as.POSIXct(results$date)
rd$rankingdate <- as.POSIXct(rd$rankingdate)
rd$pct <- NA
rd$pct[!is.na(rd$record.w)] <- rd[!is.na(rd$record.w),]$record.w/
(rd[!is.na(rd$record.w),]$record.w+rd[!is.na(rd$record.w),]$record.l)
numcorrect  <- 0
numwrong <- 0
View(rd)
for(i in 1:length(results$date)){
#Find most recent power ranking
for(j in 1:length(rd$date)){ #(rec in rd){
if(rd[j,]$rankingdate < results[i,]$date & rd[j,]$team==results[i,]$team.home){
lastranking.home <- rd[j,]
}
if(rd[j,]$rankingdate < results[i,]$date & rd[j,]$team==results[i,]$team.away){
lastranking.away <- rd[j,]
}
}
# If the power ranking correctly predicted outcome
if((results[i,]$pts.home > results[i,]$pts.away &
lastranking.home$teamrank > lastranking.away$teamrank) |
(results[i,]$pts.away > results[i,]$pts.home &
lastranking.away$teamrank > lastranking.home$teamrank)){
numcorrect <- numcorrect + 1
}
if((results[i,]$pts.home < results[i,]$pts.away &
lastranking.home$teamrank > lastranking.away$teamrank) |
(results[i,]$pts.away < results[i,]$pts.home &
lastranking.away$teamrank > lastranking.home$teamrank)){
numwrong <- numwrong + 1
}
}
View(rd)
rd[j,]
rd[1,]
j
1:10
for(j in 1:length(rd$date)){print(j)}
length(rd$rankingdate)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
numcorrect
numwrong
results$correct <- NA
View(results)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
View(results)
VIew(rd)
View(rd)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
20%3
20%%3
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
numcorrect
numwrong
numwrong+numcorrect
numcorrect/(1230)
date <- as.POSIXct("01052016", format="%m%d%Y")
date
day <- format(date, "%d")
month <- format(date, "%m")
year <- format(date, "%Y")
URL <- paste("http://www.basketball-reference.com/friv/standings.cgi?month=", month,"&day=", day, "&year=", year, "&lg_id=NBA", sep="")
thepage = readLines(URL)
x <- data.frame(date=character(), team=character(), wins=integer(), losses=integer())
thepage <- grep("full_table", thepage, value=TRUE)
avg.PF <- as.numeric(gsub(".*data-stat=\\\"pts_per_g\\\" >([0-9]*)<.*", "\\1", z))
z <- grep(paste("/teams/", team, "/", sep=""), thepage, value=TRUE)
team="BOS"
z <- grep(paste("/teams/", team, "/", sep=""), thepage, value=TRUE)
avg.PF <- as.numeric(gsub(".*data-stat=\\\"pts_per_g\\\" >([0-9]*)<.*", "\\1", z))
avg.PF
gsub(".*data-stat=\\\"pts_per_g\\\" >([0-9]*)<.*", "\\1", z)
avg.PF <- as.numeric(gsub(".*pts_per_g\\\" >([0-9.]*)<", "\\1", z))
gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z)
losses <- as.numeric(gsub(".*data-stat=\\\"losses\\\" >([0-9]*)<.*", "\\1", z))
avg.PF <- as.numeric(gsub(".*pts_per_g\\\" >([0-9.]*)<", "\\1", z))
avg.PF <- as.numeric(gsub(".*pts_per_g\\\" >([0-9.]*)<", "\\1", z))
gsub(".*pts_per_g\\\" >([0-9.]*)<", "\\1", z)
avg.PF <- as.numeric(gsub(".*pts_per_g\\\" >([0-9]*\.?[0-9]*)<", "\\1", z))
avg.PF <- as.numeric(gsub(".*pts_per_g\\\" >([0-9]*\\.?[0-9]*)<", "\\1", z))
gsub(".*pts_per_g\\\" >([0-9]*\\.?[0-9]*)<", "\\1", z)
avg.PF <- as.numeric(gsub(".*pts_per_g\\\" >([0-9]*\\.?[0-9]*)<.*", "\\1", z))
avg.PA <- as.numeric(gsub(".*opp_pts_per_g\\\" >([0-9]*\\.?[0-9]*)<.*", "\\1", z))
avg.PD <- avg.PF - avg.PA
avg.PD
avg.PF
avg.PA
URL
avg.PF <- as.numeric(gsub(".*data-stat=\"pts_per_g\\\" >([0-9]*\\.?[0-9]*)<.*", "\\1", z))
#data-stat="pts_per_g" >113.9<
avg.PA <- as.numeric(gsub(".*data-stat=\"opp_pts_per_g\\\" >([0-9]*\\.?[0-9]*)<.*", "\\1", z))
avg.PD <- avg.PF - avg.PA
avg.PD
source('~/Documents/Programming/NBABoxScores/PowerRankingsScraper.R', echo=TRUE)
View(rd)
rd <- read.table("powerrankings15-16.csv")
View(rd)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
is.NA(NA)
is.na(NA)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
View(results)
lastranking.home
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
View(rd)
source('~/Documents/Programming/NBABoxScores/NBAResultPredicting.R', echo=TRUE)
i
lastranking.home
lastranking.away
lastranking.home$record.l
lastranking.away$record.l
errors()
warnings()
